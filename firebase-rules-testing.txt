rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // TESTING RULES - TEMPORARILY PERMISSIVE FOR METADATA SETUP
    // Use these rules first to test metadata functionality, then switch to secure rules

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      // Admins can read all user data (for customer support)
      allow read: if request.auth != null && isAdmin();
    }

    // Admin users collection - only admins can access
    match /admins/{adminId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Products collection - public read, admin write
    match /products/{productId} {
      allow read: if true; // Public read access for browsing
      allow write: if request.auth != null && isAdmin();
      allow write: if request.resource.size < 1024 * 1024;
    }

    // Categories collection - public read, admin write
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && isAdmin();
      allow write: if request.resource.size < 100 * 1024;
    }

    // ==================== METADATA COLLECTIONS (TESTING MODE) ====================
    // TEMPORARILY ALLOW ALL OPERATIONS FOR TESTING - SECURE LATER
    
    // Image metadata - TESTING: allow all operations
    match /image_metadata/{imageId} {
      allow read, write: if true; // TESTING ONLY - remove after setup
    }

    // Product metadata - TESTING: allow all operations  
    match /product_metadata/{productId} {
      allow read, write: if true; // TESTING ONLY - remove after setup
    }

    // Product categories - TESTING: allow all operations
    match /product_categories/{categoryId} {
      allow read, write: if true; // TESTING ONLY - remove after setup
    }

    // Product reviews - TESTING: allow all operations
    match /product_reviews/{reviewId} {
      allow read, write: if true; // TESTING ONLY - remove after setup
    }

    // Test connection - TESTING: allow all operations
    match /test_connection {
      allow read, write: if true; // TESTING ONLY
    }
    // ==================== END METADATA COLLECTIONS ====================

    // Orders collection - users can read/write their own orders, admins can read all
    match /orders/{orderId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      allow write: if request.resource.size < 500 * 1024;
    }

    // Custom requests - users can create/read their own, admins can read all
    match /customRequests/{requestId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      allow write: if request.resource.size < 200 * 1024;
    }

    // Cart items - users can manage their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow write: if request.resource.size < 100 * 1024;
    }

    // Reviews - authenticated users can create, everyone can read
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow write: if request.resource.size < 50 * 1024;
    }

    // Contact messages - users can create, admins can read
    match /contactMessages/{messageId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && isAdmin();
      allow write: if request.resource.size < 50 * 1024;
    }

    // Site settings - admin only
    match /settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
      allow write: if request.resource.size < 50 * 1024;
    }

    // Analytics and logs - admin only
    match /analytics/{docId} {
      allow read, write: if request.auth != null && isAdmin();
      allow write: if request.resource.size < 100 * 1024;
    }

    // Admin collection - admin only access
    match /admin/{document=**} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
