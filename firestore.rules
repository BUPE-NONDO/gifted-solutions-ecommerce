rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // FREE TIER OPTIMIZED FIRESTORE RULES
    // Designed to minimize read/write operations and stay within limits

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      // Admins can read all user data (for customer support)
      allow read: if request.auth != null && isAdmin();
    }

    // Products collection - public read, admin write (FREE tier optimized)
    match /products/{productId} {
      allow read: if true; // Public read access for browsing
      allow write: if request.auth != null && isAdmin();
      // Limit document size for FREE tier (max 1MB per product)
      allow write: if request.resource.size < 1024 * 1024;
    }

    // Categories collection - public read, admin write (FREE tier optimized)
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && isAdmin();
      // Small document size for categories
      allow write: if request.resource.size < 100 * 1024; // 100KB limit
    }

    // Orders collection - users can read/write their own orders, admins can read all
    match /orders/{orderId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      // Limit order document size for FREE tier
      allow write: if request.resource.size < 500 * 1024; // 500KB limit
    }

    // Custom requests collection - users can read/write their own requests, admins can read all
    match /customRequests/{requestId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      // Limit custom request size
      allow write: if request.resource.size < 200 * 1024; // 200KB limit
    }

    // Cart items - users can manage their own cart (FREE tier optimized)
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Limit cart size to prevent abuse
      allow write: if request.resource.size < 100 * 1024; // 100KB limit
    }

    // Reviews - authenticated users can create, everyone can read (FREE tier optimized)
    match /reviews/{reviewId} {
      allow read: if true; // Public read for product reviews
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
        (request.auth.uid == resource.data.userId || isAdmin());
      // Limit review size
      allow write: if request.resource.size < 50 * 1024; // 50KB limit
    }

    // Contact messages - authenticated users can create, admins can read
    match /contactMessages/{messageId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && isAdmin();
      // Limit message size
      allow write: if request.resource.size < 50 * 1024; // 50KB limit
    }

    // Site settings - admin only (cached for performance)
    match /settings/{settingId} {
      allow read: if true; // Public read for site configuration
      allow write: if request.auth != null && isAdmin();
      // Small settings documents
      allow write: if request.resource.size < 50 * 1024; // 50KB limit
    }

    // Analytics and logs - admin only (FREE tier optimized)
    match /analytics/{docId} {
      allow read, write: if request.auth != null && isAdmin();
      // Limit analytics document size
      allow write: if request.resource.size < 100 * 1024; // 100KB limit
    }

    // Admin analytics and settings - admin only
    match /admin/{document=**} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Helper function to check if user is admin (optimized)
    function isAdmin() {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
